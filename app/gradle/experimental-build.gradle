// EXPERIMENTAL
//
// playgroundフレーバーに対して、dexファイルのビルド時間を減らすタスクを追加する
// dexファイルをビルドする前のタスクでPlayGroundActivityが依存するクラスファイルを削除する
// 最近はビルド時間が速まっているので、この施策の効果は薄いかもしれない
//
// TODO: もし使い続けるのなら、コードを整理した方がいい
//

def experimentalBuildEnabled
if (project.properties.hasProperty("net.circlebinder.build.experimental")) {
    experimentalBuildEnabled = project.properties.get("net.circlebinder.build.experimental")
} else {
    experimentalBuildEnabled = false
}
android.applicationVariants.all { variant ->
    def isPlaygroundDebug = variant.productFlavors[0].name == "playground" && variant.buildType.name == "debug"
    if (!isPlaygroundDebug || !experimentalBuildEnabled) {
        return
    }
    compilePlaygroundDebugJava.doLast{
        def findPath = "${project.getBuildDir()}/intermediates/classes/playground/debug/"
        def bootstrapClasses = "circlebinder/playground/PlayGroundActivity.class circlebinder/common/app/CircleBinderApplication.class"
        def process = ["bash", "-c", "${project.projectDir}/gradle/deps.sh ${findPath} ${bootstrapClasses}"].execute()
        process.waitFor()
        def useClasses = ['':'']
        process.text.split("\n").each{useClasses["${it}"] = 1}
        def forceIncludeClasses = [
                "circlebinder/common/table",
                "circlebinder/common/app/CircleBinderApplication"
        ];
        def willRemoveClasses = ['':'']
        ["net/ichigotake", "circlebinder"].each{ pattern ->
            def dir = new File("${findPath}/${pattern}")
            dir.eachFileRecurse {file ->
                if (!file.isFile()) {
                    return
                }
                def isForceInclude = forceIncludeClasses.find{
                    file.getPath().startsWith("${findPath}${it}")}
                if (isForceInclude) {
                    return
                }
                def findTarget = file.getPath().replace("${findPath}", "").replace("/", ".").replace(".class", "")
                willRemoveClasses["${file.getPath()}"] = !useClasses.containsKey(findTarget)
            }
        }
        useClasses.collect{entry ->
            def findTarget = "${entry.key.replace("${findPath}/", "").replace(".", "/")}.java"
            def proc = ["sh", "-c", "${project.projectDir}/gradle/deps-custom-view.sh ${findTarget}"].execute()
            proc.waitFor()
            def result = proc.text.split("\n").toList()
            result.each {
                if (it.trim().isEmpty()) {
                    return
                }
                def path = "${it.replace(".", "/")}.class"
                def _process = ["bash", "-c", "${project.projectDir}/gradle/deps.sh ${findPath} '${path}'"].execute()
                _process.waitFor()
                _process.text.split("\n").each{
                    def _path = "${findPath}${it.replace(".", "/")}.class"
                    willRemoveClasses["${_path}"] = false
                }
                willRemoveClasses["${findPath}${path}"] = false
            }
        }
        def removeClasses = []
        willRemoveClasses.each {entry ->
            if (entry.value) {
                removeClasses.add(entry.key)
                removeClasses.add("${entry.key.replaceAll(/\.class/, "")}\$*.class")
            }
        }
        def __proc = ["sh", "-c", "rm -f ${removeClasses.join(" ")}"].execute()
        __proc.waitFor()
    }

}

// https://gist.github.com/ichigotake/6f6c21c26971c4248d6d
task archonDebug(type: Exec) {
    executable "bash"
    args "--login", "-c", "chromeos-apk '${buildDir}/outputs/apk/app-creation-debug.apk' " \
            + "&& /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --load-and-launch-app=${projectDir}/circlebinder.creation.debug.android/"
}
archonDebug.dependsOn "assembleCreationDebug"

task archonPlayGround(type: Exec) {
    executable "bash"
    args "--login", "-c", "chromeos-apk '${buildDir}/outputs/apk/app-playground-debug.apk' " \
            + "&& /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --load-and-launch-app=${projectDir}/circlebinder.playground.debug.android/"
}
archonPlayGround.dependsOn "assemblePlayGroundDebug"
